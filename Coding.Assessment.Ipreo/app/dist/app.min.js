!function(){"use strict";window.Ipreo={},window.Ipreo.getNamespace=function(e){for(var t,a=e.split("."),n=window,i=0;i<a.length;i++)void 0!==n[t=a[i]]&&null!==n[t]||(n[t]={}),n=n[t];return n}}(),function(e,t){"use strict";t.SubwayStopPageHandler=function(){var t={apiPrefix:"/api/subwaystops",getSubwayStops:"",calculateDistance:"/distance"},a={originTextBox:"#origin",destinationTextBox:"#destination",typeahead:".typeahead",button:"#calculate-button",message:"#message",form:"#form",responseTemplate:"#response-template"};function n(){var t=e(a.originTextBox).val(),n=e(a.destinationTextBox).val(),i=e(a.button);return t&&n?(i.prop("disabled",!1),!0):(i.prop("disabled","disabled"),!1)}function i(i){!function(){var i,o,r=e(a.originTextBox),s=e(a.destinationTextBox);n()&&(i=r.typeahead("getActive"),o=s.typeahead("getActive"),i.hasOwnProperty("id")&&o.hasOwnProperty("id")&&(e(a.message).text("loading..."),e.ajax({type:"POST",url:t.apiPrefix+t.calculateDistance,dataType:"json",data:JSON.stringify({originSubwayStopId:i.id,destinationSubwayStopId:o.id}),contentType:"application/json"}).done(function(t){var n=function(t){var n,i=e(a.responseTemplate).html();if(null!==t&&void 0!==t)for(n in t)t.hasOwnProperty(n)&&(i=i.replace("{{"+n+"}}",t[n]));return i}(t);e(a.message).html(n)}).fail(function(t,n){e(a.message).text("An error occurred requesting the information. Error: "+n)})))}(),i.preventDefault()}return this.init=function(){e(a.message).text("loading..."),e.get(t.apiPrefix+t.getSubwayStops,function(t){n=t,e(a.typeahead).typeahead({source:n,autoSelect:!0}).prop("disabled",!1);var n;e(a.message).text("")}),e(a.originTextBox+","+a.destinationTextBox).change(function(){e(a.message).text(""),n()}),e(a.form).on("submit",i)},this}}(window.jQuery,Ipreo.getNamespace("Ipreo.PageHandlers"));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
